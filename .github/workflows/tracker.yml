name: test tracker

on: [push, pull_request, workflow_dispatch]
# paths:
# - "*"
# - "!README.md" <-- don't rebuild on doc change

jobs:
  build:
    runs-on: ubuntu-20.04
    container: ardupilot/ardupilot-dev-${{ matrix.toolchain }}:latest
    strategy:
      fail-fast: false  # don't cancel if a job from the matrix fails
      matrix:
        toolchain: [
            base,  # GCC
            chibios,
        ]
        gcc: [6]
    steps:
      # git checkout the PR
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      # Put ccache into github cache for faster build
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        run: |
          NOW=$(date -u +"%F-%T")
          echo "::set-output name=timestamp::${NOW}"
      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{github.workflow}}-ccache-${{ matrix.toolchain }}-${{steps.ccache_cache_timestamp.outputs.timestamp}}
          restore-keys: ${{github.workflow}}-ccache-${{ matrix.toolchain }}-  # restore ccache from either previous build on this branch or on master
      - name: setup ccache
        run: |
          mkdir -p ~/.ccache
          echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          echo "max_size = 400M" >> ~/.ccache/ccache.conf
          ccache -s
          ccache -z
      - name: build tracker ${{ matrix.toolchain }}
        shell: bash
        run: |
          if [[ ${{ matrix.toolchain }} = "clang" ]]; then
            export CC=clang-7
            export CXX=clang++-7
          fi
          PATH="/usr/lib/ccache:/opt/gcc-arm-none-eabi-${{matrix.gcc}}/bin:$PATH"
          PATH="/github/home/.local/bin:$PATH"
                    
          sudo apt-get update
          sudo apt-get install -y autoconf automake flex bison build-essential libssl-dev libz-dev p7zip-full
          cd modules/gsoap
          sed -i 's/\/\/ #  include <fcntl.h>/#  include <fcntl.h>/g' gsoap/stdsoap2.h
          sudo autoreconf -f -i
          sudo ./configure
          sudo make
          sudo make install
          cd ..
          cd ..
          
          cd modules/ChibiOS/ext
          7z x lwip-2.1.2.7z
          
          cd ..
          cd ..
          cd ..
          
          mkdir modules/ChibiOS/ext/lwip/src/include/compat/posix/netinet
          echo '#include "lwip/sockets.h"' > modules/ChibiOS/ext/lwip/src/include/compat/posix/netinet/in.h
          echo '#include "lwip/sockets.h"' > modules/ChibiOS/ext/lwip/src/include/compat/posix/netinet/tcp.h

          
          ./waf configure --board H757I_EVAL --debug --enable-onvif --enable-asserts
          ./waf antennatracker
          
          echo ./waf configure --board sitl  --debug --enable-onvif --enable-asserts
          echo ./waf antennatracker
          ccache -s
          ccache -z
      - uses: actions/upload-artifact@v2
        with:
          path: build\H757I_EVAL\bin